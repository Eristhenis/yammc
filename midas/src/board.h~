#pragma once

#include <memory>
#include <vector>

#include "animation.h"
#include "asset_manager.h"
#include "constants.h"

class Timer {
 public:
  Timer(int timer) : timer_(timer), start_(SDL_GetTicks()) {
  }

  int operator()() {
    if (SDL_GetTicks() - start_ >= 1000) {
      start_ = SDL_GetTicks();
      timer_ = std::max(--timer_, 0);
    }
    return timer_;
  }

 private:
  int timer_;
  int start_;
};

class Board {
 public:
  Board();
  ~Board() noexcept;

  operator SDL_Window*() const { return window_; }

  std::shared_ptr<Animation> GetInteraction(int row, int col);
  std::shared_ptr<Animation> Render(std::shared_ptr<Animation> action);
  int get_id(int row, int col) { return grid_->At(row, col); }

 protected:
  void RenderText(int x, int y, Font font, const std::string text);
  void UpdateStatus(int x, int y);

 private:
  std::pair<int, int> first_marker_ = {-1, -1};
  bool board_busy_ = false;
  int score_ = 0;
  Timer timer_ = 10; //kGameTime;
  std::unique_ptr<Grid<int>> grid_;
  std::unique_ptr<AssetManager> asset_manager_;

  SDL_Window *window_ = nullptr;
  SDL_Renderer *renderer_ = nullptr;
  std::vector<std::shared_ptr<Animation>> animations_;
};
